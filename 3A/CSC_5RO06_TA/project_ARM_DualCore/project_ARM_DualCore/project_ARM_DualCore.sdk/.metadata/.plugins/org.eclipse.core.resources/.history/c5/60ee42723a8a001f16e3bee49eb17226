#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "xparameters.h"
#include "xil_printf.h"
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include "xsdps.h"
#include "ff.h"
#include "xil_types.h"
#include "xscutimer.h"
#include <sys/time.h>
#include "xtime_l.h"
#include "xbram.h"

#define SIZE 512

//timer info
#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR
#define TIMER_LOAD_VALUE	0xFFFFFFFF

XScuTimer	Timer;

int A[SIZE][SIZE];
int B[SIZE][SIZE];
int C[SIZE][SIZE];


XBram Bram;	/* The Instance of the BRAM Driver */

#define LOC_BRAM_SEMAPHORE 8
#define FLAG_SEMAPHORE_START_READ 0x12345678
#define FLAG_SEMAPHORE_STOP_READ 0x89ABCDEF
#define FLAG_SEMAPHORE_STOP_MULT 0x11111111

int initializeDevice(u16 MutexDeviceID){
	int Status;
	u16 DeviceId = MutexDeviceID;
	XBram_Config *ConfigPtr = NULL;

	ConfigPtr = XBram_LookupConfig(DeviceId);
	if (NULL == ConfigPtr)
	{
		xil_printf("(ARM0) failed getting BRAM configuration\n");
		return XST_FAILURE;
	}

	Status = XBram_CfgInitialize(&Bram, ConfigPtr, ConfigPtr->CtrlBaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("(ARM0) failed initializing BRAM controller\n");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}


void naiveMultiplication(const int A[SIZE][SIZE], const int B[SIZE][SIZE], int C[SIZE][SIZE]) {
    for (int i = 0; i < SIZE/2; ++i)
        for (int j = 0; j < SIZE; ++j)
            for (int k = 0; k < SIZE; ++k)
                C[i][j] += A[i][k] * B[k][j];
}

void naiveReorderedMultiplication(const int A[SIZE][SIZE], const int B[SIZE][SIZE], int C[SIZE][SIZE]) {
    for (int i = 0; i < SIZE/2; ++i)
        for (int k = 0; k < SIZE; ++k)
            for (int j = 0; j < SIZE; ++j)
                C[i][j] += A[i][k] * B[k][j];
}

void blockMultiplication(const int A[SIZE][SIZE], const int B[SIZE][SIZE], int C[SIZE][SIZE], int blockSize) {
    for (int ii = 0; ii < SIZE/2; ii += blockSize)
        for (int jj = 0; jj < SIZE; jj += blockSize)
            for (int kk = 0; kk < SIZE; kk += blockSize)
                for (int i = ii; i < ((ii + blockSize < SIZE) ? ii + blockSize : SIZE); ++i)
                    for (int j = jj; j < ((jj + blockSize < SIZE) ? jj + blockSize : SIZE); ++j)
                        for (int k = kk; k < ((kk + blockSize < SIZE) ? kk + blockSize : SIZE); ++k)
                            C[i][j] += A[i][k] * B[k][j];
}

void blockReorderedMultiplication(const int A[SIZE][SIZE], const int B[SIZE][SIZE], int C[SIZE][SIZE], int blockSize) {
    for (int ii = 0; ii < SIZE/2; ii += blockSize)
        for (int kk = 0; kk < SIZE; kk += blockSize)
            for (int jj = 0; jj < SIZE; jj += blockSize)
                for (int i = ii; i < ((ii + blockSize < SIZE) ? ii + blockSize : SIZE); ++i)
                    for (int k = kk; k < ((kk + blockSize < SIZE) ? kk + blockSize : SIZE); ++k)
                        for (int j = jj; j < ((jj + blockSize < SIZE) ? jj + blockSize : SIZE); ++j)
                            C[i][j] += A[i][k] * B[k][j];
}

void mat_mult_sw(){

	int dBram;

	XScuTimer_Config *TMRConfigPtr;     //timer config

	TMRConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);
	XScuTimer_CfgInitialize(&Timer, TMRConfigPtr,TMRConfigPtr->BaseAddr);
	XScuTimer_SelfTest(&Timer);
	//load the timer
	XScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);

	for (int i = 0; i < SIZE; ++i)
        for (int j = 0; j < SIZE; ++j) {
            A[i][j] = rand() % 10 + 1;
            B[i][j] = rand() % 10 + 1;
        }

	// Initialize BRAM devices
	initializeDevice(XPAR_BRAM_0_DEVICE_ID);
	xil_printf("(ARM0) connected\n");

	XBram_WriteReg(XPAR_BRAM_0_BASEADDR, 0, (u32)A);
    XBram_WriteReg(XPAR_BRAM_0_BASEADDR, SIZE * SIZE * sizeof(int), (u32)B);


	// Send flag to proc0 to read the matrix from SD card
	XBram_WriteReg(XPAR_BRAM_0_BASEADDR, LOC_BRAM_SEMAPHORE, FLAG_SEMAPHORE_START_READ);

	// Wait the flag from proc0 when proc0 finished to read the matrix from SD card
	dBram = XBram_ReadReg(XPAR_BRAM_0_BASEADDR, LOC_BRAM_SEMAPHORE);
	while(dBram != FLAG_SEMAPHORE_STOP_READ){
		dBram = XBram_ReadReg(XPAR_BRAM_0_BASEADDR, LOC_BRAM_SEMAPHORE);
	}

	// Initialize matrix C
	for(int i = 0; i < SIZE; i++){
		for(int j = 0; j < SIZE; j++){
			C[i][j] = 0;
		}
	}

	XTime tProcessorStart, tProcessorEnd;
	XTime_GetTime(&tProcessorStart);

	// Better use the cache by changing the order of the loops
	for(int i = 0; i < SIZE/2; i++){
		for(int k = 0; k < SIZE; k++){
			for(int j = 0; j < SIZE; j++){
				C[i][j] += A[i][k]*B[k][j];
			}
		}
	}

	// Wait the proc0 to finish its part of matrix multiplication
	dBram = XBram_ReadReg(XPAR_BRAM_0_BASEADDR, LOC_BRAM_SEMAPHORE);
	while(dBram != FLAG_SEMAPHORE_STOP_MULT){
		dBram = XBram_ReadReg(XPAR_BRAM_0_BASEADDR, LOC_BRAM_SEMAPHORE);
	}

	XTime_GetTime(&tProcessorEnd);

	// Calculate the time
	printf("(ARM0)PS took %.5f ms. to calculate the product \n", 1000.0 * (tProcessorEnd - tProcessorStart) / (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ));
	Xil_DCacheFlush();

}

int main()
{
	init_platform();
	xil_printf("Platform initialized 0.\n");
	mat_mult_sw();
    cleanup_platform();
    return 0;
}
